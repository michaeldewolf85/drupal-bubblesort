<?php
/**
 * @file
 * Hook implementations and functions for the bubblesort.
 */

/**
 * Implements hook_permission().
 */
function bubblesort_permission() {
  return array(
    'Use bubblesort' => array(
      'title' => t('Use Bubble Sort Simulation'),
    ),
    'Administer Bubblesort settings' => array(
      'title' => t('Configure Bubble Sort Simulation'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function bubblesort_menu() {
  $items['bubblesort'] = array(
    'title' => 'Bubble Sort Simulation',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('bubblesort_form'),
    'access arguments' => array('Use bubblesort'),
  );

  // Administration page.
  $items['admin/settings/bubblesort'] = array(
    'title' => 'Select hows many numbers to be sorted?',
    'description' => 'Bubblesort configurations',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('bubblesort_admin'),
    'access arguments' => array('Administer Bubblesort settings'),
    'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}

/**
 * Page callback for admin/settings/bubblesort.
 */
function bubblesort_admin() {
  $form = array();

  $range = range(5, 20);
  $options = array_combine($range, $range);
  $form['bubblesort_size'] = array(
    '#type' => 'select',
    '#options' => $options,
    '#multiple' => FALSE,
    '#size' => 16,
    '#default_value' => variable_get('bubblesort_size', 10),
    '#description' => t("How many numbers to be sorted?"),
    '#required' => TRUE,
  );

  return system_settings_form($form);
}


/**
 * Returns random array[0..$arr_size] of values 0..100.
 *
 * @param int $arr_size
 *   (optional) The size of the array.
 *
 * @return array
 *   The array as requested.
 */
function _bubblesort_shuffle($arr_size = 10) {
  $arr = array();
  for ($i = 0; $i < $arr_size; $i++) {
    $arr[] = rand(0, 100);
  }
  return $arr;
}

/**
 * Swaps two values in the array.
 */
function _bubblesort_swap(&$arr, $a, $b) {
  $tmp = $arr[$a];
  $arr[$a] = $arr[$b];
  $arr[$b] = $tmp;
}

/**
 * Checks if we need to swap.
 */
function _bubblesort_to_swap(&$arr, &$i, &$j) {
  return $arr[$j + 1] < $arr[$j];
}

/**
 * Runs bubble sort iteration.
 */
function _bubblesort_step(&$arr, &$i, &$j) {

  // Compares two values.
  if (_bubblesort_to_swap($arr, $i, $j)) {
    _bubblesort_swap($arr, $j, $j + 1);
  }

  // Iterates.
  $j++;
  if ($j >= count($arr) - $i - 1) {
    $j = 0; $i++;
  }
  if ($i >= count($arr)) {
    return FALSE;
  }
  return TRUE;
}

/**
 * Watch data.
 */
function _bubblesort_watch(&$arr, &$i, &$j) {
  return array(
    'index' => $j,
    'current' => isset($arr[$j]) ? $arr[$j] : 'n/a',
    'next' => isset($arr[$j + 1]) ? $arr[$j + 1] : 'n/a',
    'to_swap' => isset($arr[$j]) &&  isset($arr[$j + 1]) ? _bubblesort_to_swap($arr, $i, $j) : 'n/a',
  );
}

/**
 * Bubble Sort Simulation form.
 */
function bubblesort_form($form, &$form_state) {
  // Gets the array size.
  $arr_size = variable_get('bubblesort_size', 10);

  // Add CSS file.
  drupal_add_css(drupal_get_path('module', 'bubblesort') . '/bubblesort.css');

  $form = array();

  // Get or init storage.
  $form_state['storage'] = empty($form_state['storage']) ? array() : $form_state['storage'];
  $s =& $form_state['storage'];

  // Get button.
  $op = empty($form_state['values']['op']) ? '' : $form_state['values']['op'];

  // Set status.
  $in_progress = TRUE;

  // Processes Shuffle button click.
  if (empty($s) || $op == t('Shuffle')) {
    $s['arr'] = _bubblesort_shuffle($arr_size);
    $s['i'] = 0;
    $s['j'] = 0;
    $s['watch'] = _bubblesort_watch($s['arr'], $s['i'], $s['j']);
  }

  // Processes Step button click.
  if ($op == t('Step')) {
    $in_progress = _bubblesort_step($s['arr'], $s['i'], $s['j']);
    $s['watch'] = _bubblesort_watch($s['arr'], $s['i'], $s['j']);
  }

  $form['bubblesort'] = array(
    '#type' => 'container',
    '#prefix' => '<div id="bubblesort">',
    '#suffix' => '</div>',
  );

  $form['bubblesort']['index'] = array(
    '#title' => t('Index key'),
    '#type' => 'textfield',
    '#value' => $s['watch']['index'],
    '#disabled' => 'true',
    '#attributes' => array(
      'class' => array(
        'field-name-bubblesort-index',
      ),
    ),
  );

  $form['bubblesort']['current'] = array(
    '#title' => t("Index's value"),
    '#type' => 'textfield',
    '#value' => $s['watch']['current'],
    '#disabled' => 'true',
    '#attributes' => array(
      'class' => array(
        'field-name-bubblesort-index-value',
      ),
    ),
  );

  $form['bubblesort']['next'] = array(
    '#title' => t("Next's value"),
    '#type' => 'textfield',
    '#value' => $s['watch']['next'],
    '#disabled' => 'true',
    '#attributes' => array(
      'class' => array(
        'field-name-bubblesort-next',
      ),
    ),
  );

  $form['bubblesort']['to_swap'] = array(
    '#title' => t('Will be swaped'),
    '#type' => 'textfield',
    '#value' => $s['watch']['to_swap'] ? 'true' : 'false',
    '#disabled' => 'true',
    '#attributes' => array(
      'class' => array(
        'field-name-bubblesort-swap',
      ),
    ),
  );

  // Draws chart.
  $height = variable_get('bubblesort_size', 10) * 30;
  $chart = array(
    '#chart_id' => 'chart',
    '#type' => CHART_TYPE_BAR_H_GROUPED,
    '#title' => '',
    '#size' => array(
      '#width' => 300,
      '#height' => $height,
    ),
  );

  // Index bar.
  $color_index = "FF8000";
  // Next, to swap.
  $color_swap = "63DC90";
  // Next, to keep.
  $color_keep = "FF2C00";
  // Default bars.
  $color_default = "FFCA40";

  foreach ($s['arr'] as $key => $el) {
    $chart['#data'][] = array($el);
    // The index itself.
    if ($key == $s['watch']['index']) {
      $chart['#data_colors'][] = $color_index;
    }
    // Number being compared that will be swapped.
    elseif (($key == $s['watch']['index'] + 1) && $s['watch']['to_swap']) {
      $chart['#data_colors'][] = $color_swap;
      $form['bubblesort']['next']['#attributes']['class'][] = 'bubblesort-next-swap';
      $form['bubblesort']['to_swap']['#attributes']['class'][] = 'bubblesort-next-swap';
    }
    // Number being compared that will NOT be swapped.
    elseif (($key == $s['watch']['index'] + 1)) {
      $chart['#data_colors'][] = $color_keep;
      $form['bubblesort']['next']['#attributes']['class'][] = 'bubblesort-next-keep';
      $form['bubblesort']['to_swap']['#attributes']['class'][] = 'bubblesort-next-keep';
    }
    // Standard bars color.
    else {
      $chart['#data_colors'][] = $color_default;
    }
  }

  // Chart's markup.
  $form['bubblesort']['chart'] = array(
    '#type' => 'markup',
    '#markup' => theme('chart', array('chart' => $chart)),
  );

  // Outputs an array list.
  $options = array();
  foreach ($s['arr'] as $key => $value) {
    $options[$key] = $key . ': ' . $value;
  }
  $form['bubblesort']['arr'] = array(
    '#type' => 'select',
    '#options' => $options,
    '#disabled' => TRUE,
    '#multiple' => FALSE,
    '#size' => variable_get('bubblesort_size', 10),
    '#value' => $s['watch']['index'],
  );

  // Shufle button.
  $form['bubblesort']['shuffle'] = array(
    '#type' => 'submit',
    '#value' => t('Shuffle'),
    '#executes_submit_callback' => FALSE,
    '#ajax' => array(
      'callback' => 'bubblesort_form_ajax',
      'wrapper' => 'bubblesort',
      'method' => 'replace',
      'effect' => 'fade',
    ),
  );

  // Step button.
  $form['bubblesort']['step'] = array(
    '#type' => 'submit',
    '#value' => t('Step'),
    '#executes_submit_callback' => FALSE,
    '#ajax' => array(
      'callback' => 'bubblesort_form_ajax',
      'wrapper' => 'bubblesort',
      'method' => 'replace',
      'effect' => 'fade',
    ),
    '#disabled' => !$in_progress,
  );

  // Play button.
  $form['bubblesort']['play'] = array(
    '#type' => 'checkbox',
    '#title' => '<span class="onoffswitch-inner"></span><span class="onoffswitch-switch"></span>',
    '#executes_submit_callback' => FALSE,
    '#prefix' => '<div class="onoffswitch">',
    '#suffix' => '</div>',
    '#attributes' => array(
      'class' => array(
        'field-name-bubblesort-play',
        'onoffswitch-checkbox',
      ),
    ),
  );

  $options = array(
    'type' => 'file',
  );
  drupal_add_js(drupal_get_path('module', 'bubblesort') . '/js/bubblesort.js', $options);

  return $form;
}

/**
 * Bubble Sort Simulation ajax handler.
 */
function bubblesort_form_ajax($form, &$form_state) {
  return $form['bubblesort'];
}
